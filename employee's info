from string import ascii_letters


class Person:
    "Класс содержит информацию о сотрудниках"
    
    S_RUS = 'абвгдеёжзийклмнопрстуфхцчшщьыъэюя-'
    S_RUS_UPPER = S_RUS.upper()

    def __init__(self, fio, old, ps, weight):
        self.verify_fio(fio)
        # self.verify_old(old)
        # self.verify_ps(ps)
        # self.verify_weight(weight)

        self.__fio = fio.split()
        self.old = old
        self.passport = ps
        self.weight = weight

    @classmethod
    def verify_fio(cls, fio):
        if type(fio) != str:
            raise TypeError('FIO should be a string')
        f = fio.split()
        if len(f) != 3:
            raise TypeError('Incorrect format of FIO')

        letters = ascii_letters + cls.S_RUS + cls.S_RUS_UPPER
        for s in f:
            if len(s) < 1:
                raise TypeError('In FIO should be at least one symbol')
            if len(s.strip(letters)) != 0:
                raise TypeError('Only letters and hyphens can be used in FIO')

    @classmethod
    def verify_old(cls, old):
        if type(old) != int or old < 14 or old > 120:
            raise TypeError('The age should be an integer in range[14; 120]')

    @classmethod
    def verify_weight(cls, w):
        if type(w) != float or w < 20:
            raise TypeError('Weight must be a real number of 20 or more')

    @classmethod
    def verify_ps(cls, ps):
        if type(ps) != str:
            raise TypeError('Passport should be a string')

        s = ps.split()
        if len(s) != 2 or len(s[0]) != 4 or len(s[1]) != 6:
            raise TypeError('Incorrect format of passport')

        for p in s:
            if not p.isdigit():
                raise TypeError('Series and number of the passport must be a number')

    @property
    def fio(self):
        return self.__fio

    @property
    def old(self):
        return self.__old

    @old.setter
    def old(self, old):
        self.verify_old(old)
        self.__old = old

    @property
    def weight(self):
        return self.__weight

    @weight.setter
    def weight(self, weight):
        self.verify_weight(weight)
        self.__weight = weight

    @property
    def passport(self):
        return self.__passport

    @passport.setter
    def passport(self, ps):
        self.verify_ps(ps)
        self.__passport = ps


p = Person('Ivanova Anna Petrovna', 24, '4774 288233', 53.0)
p.old = 34
p.passport = '1234 123456'
p.weight = 57.0
print(p.__dict__)
print(p.weight)
print(*p.fio)
print(p.old)
print(p.passport)
print(p.old + p.weight)
